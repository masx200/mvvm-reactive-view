{"version":3,"file":"index.js","sources":["../src/UtilTools/dom.ts"],"sourcesContent":["// const document = window.document;\r\n//import { seteletext, setelehtml } from \"./directives\";\r\n//export { seteletext, setelehtml };\r\n\r\nexport function seteletext(e: Element | Node, v: string) {\r\n    e.textContent = v;\r\n}\r\nexport function setelehtml(e: Element, v: string) {\r\n    e.innerHTML = v;\r\n}\r\nexport function appendchild(\r\n    container: HTMLElement | SVGSVGElement | SVGElement | Element | Node,\r\n    ele: HTMLElement | SVGElement | Element | Node\r\n) {\r\n    container.appendChild(ele);\r\n}\r\nexport function createsvgelement() {\r\n    return createElementNS(svgnamespace, \"svg\");\r\n}\r\nexport function createnonescript() {\r\n    return createDocumentFragment();\r\n}\r\nexport function createDocumentFragment() {\r\n    return document.createDocumentFragment();\r\n}\r\nexport function createnativeelement(type: string) {\r\n    return document.createElement(type);\r\n}\r\nexport function createElementNS(namespace: string, name: string) {\r\n    return document.createElementNS(namespace, name);\r\n}\r\nexport function createtextnode(data: string | number) {\r\n    return document.createTextNode(String(data));\r\n}\r\nexport const svgnamespace = \"http://www.w3.org/2000/svg\";\r\nexport function changetext(textnode: Text, value: string) {\r\n    textnode.nodeValue = String(value);\r\n}\r\n// export default document;\r\n\r\nexport const mathnamespace = \"http://www.w3.org/1998/Math/MathML\";\r\n\r\nexport function createmathelement() {\r\n    return createElementNS(mathnamespace, \"math\");\r\n}\r\nexport function createComment() {\r\n    return document.createComment(\"\");\r\n}\r\nexport function removeElement(element: Element) {\r\n    element.remove();\r\n}\r\nexport function removeNode(node: Element | Node) {\r\n    //   node.remove();\r\n    let parentNode = node.parentNode;\r\n    if (parentNode) {\r\n        parentNode.removeChild(node);\r\n    }\r\n}\r\nexport function replaceChild(newChild: Node, oldChild: Node) {\r\n    let parentNode = oldChild.parentNode;\r\n    if (parentNode) {\r\n        parentNode.replaceChild(newChild, oldChild);\r\n    }\r\n}\r\n\r\nexport function domaddlisten(\r\n    ele: Element | Node,\r\n    event: string,\r\n    call: EventListener\r\n) {\r\n    ele.addEventListener(event, call);\r\n}\r\n\r\nexport function domremovelisten(\r\n    ele: Element | Node,\r\n    event: string,\r\n    call: EventListener\r\n) {\r\n    ele.removeEventListener(event, call);\r\n}\r\nexport function getchildren(ele: Element) {\r\n    return [...ele.children];\r\n}\r\nexport function getchildNodes(ele: Element | Node) {\r\n    return [...ele.childNodes];\r\n}\r\nexport function getAttribute(ele: Element, name: string) {\r\n    return HTMLElementprototype.getAttribute.call(ele, name);\r\n}\r\nexport function setAttribute(ele: Element, name: string, value: any) {\r\n    HTMLElementprototype.setAttribute.call(ele, name, value);\r\n}\r\nexport function removeAttribute(ele: Element, name: string) {\r\n    HTMLElementprototype.removeAttribute.call(ele, name);\r\n}\r\nconst HTMLElementprototype = HTMLElement.prototype;\r\n\r\nexport function insertfirst(\r\n    container: HTMLElement | Element,\r\n    ele: HTMLElement\r\n) {\r\n    container.insertBefore(ele, container.firstChild);\r\n}\r\nexport function createanotherhtmldocument() {\r\n    return document.implementation.createHTMLDocument(\"\");\r\n}\r\n/* export function getparentNode(ele: Node): Node {\r\n    return ele.parentNode ? ele.parentNode : ele;\r\n  }\r\n   */\r\nexport function querySelectorAll(selector: string) {\r\n    return [...document.querySelectorAll(selector)];\r\n}\r\n"],"names":["e","createElementNS","ele"],"mappings":";;;;;;;;;;;;;;;;;;qBAKIA;;;;;;;;;WAYOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBA6DPC;IAMAA;;;yBAo}